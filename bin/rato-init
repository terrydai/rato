#!/usr/bin/env node

var program = require('commander')
var exists = require('fs').existsSync
var os = require('os')
var chalk = require('chalk')
var path = require('path')
var {basename, extname} = path;
var rm = require('rimraf').sync
var Metalsmith = require('metalsmith');
var inquirer = require('inquirer');
var async = require('async');
// var meta = require('./meta.json')
var handlebars = require('handlebars')

var rato = require('../')

/**
 * Usage.
 */

program
  .usage('<template-name> [webapp-name]')

/**
 * Help.
 */


program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new webapp with a template'))
  console.log('    $ rato init webpack my-webapp')
  console.log()
  // console.log(chalk.gray('    # create a new webapp straight from a github template'))
  // console.log('    $ rato init username/repo my-webapp')
  // console.log()
})

/**
 * Help.
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help()

/**
 * Padding.
 */

console.log()
process.on('exit', function () {
  console.log()
})

/**
 * Settings.
 */

var template = program.args[0]
var rawName = program.args[1]
var inPlace = !rawName || rawName === '.'  //未指定项目名
var name = inPlace ? process.cwd() : path.resolve(rawName)
var to = path.resolve(rawName || '.')

if (exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? 'Generate webapp in current directory?'
      : 'Target directory exists. Continue?',
    name: 'ok'
  }]).then(function (answers) {
    if (answers.ok) {
      console.log()
      generate()
    }
  })
} else {
  generate()
}

//生成模版项目
function generate(){
  var metadata = {} //用户输入值


  if( !(template &&  exists(template)) ){
    console.error( chalk.red('Error: Template does not exist') )
    return
  }

  var metapath = path.join( template,  'meta')
  var meta
  try{
    meta = require( path.resolve(metapath) )
  }catch(e){
    console.error( chalk.red(`Error: Template Folder must contain  a meta.json or meta.js`) )
    return
  }

  rato(meta,  path.resolve(  path.join(template, 'template') ),  to )
}


